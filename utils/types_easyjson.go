// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package utils

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer(in *jlexer.Lexer, out *TransactionResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blockHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockHash).UnmarshalJSON(data))
			}
		case "blockNumber":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockNumber).UnmarshalJSON(data))
			}
		case "hash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Hash).UnmarshalJSON(data))
			}
		case "from":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.From).UnmarshalJSON(data))
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.To).UnmarshalJSON(data))
				}
			}
		case "gas":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Gas).UnmarshalJSON(data))
			}
		case "gasPrice":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GasPrice).UnmarshalJSON(data))
			}
		case "value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Value).UnmarshalJSON(data))
			}
		case "input":
			if in.IsNull() {
				in.Skip()
				out.Input = nil
			} else {
				out.Input = in.Bytes()
			}
		case "nonce":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Nonce).UnmarshalJSON(data))
			}
		case "transactionIndex":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionIndex).UnmarshalJSON(data))
			}
		case "v":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.V).UnmarshalJSON(data))
			}
		case "r":
			if in.IsNull() {
				in.Skip()
				out.R = nil
			} else {
				out.R = in.Bytes()
			}
		case "s":
			if in.IsNull() {
				in.Skip()
				out.S = nil
			} else {
				out.S = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer(out *jwriter.Writer, in TransactionResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix[1:])
		out.RawText((in.BlockHash).MarshalText())
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.Raw((in.BlockNumber).MarshalJSON())
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.RawText((in.Hash).MarshalText())
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.RawText((in.From).MarshalText())
	}
	if in.To != nil {
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.RawText((*in.To).MarshalText())
	}
	{
		const prefix string = ",\"gas\":"
		out.RawString(prefix)
		out.Raw((in.Gas).MarshalJSON())
	}
	{
		const prefix string = ",\"gasPrice\":"
		out.RawString(prefix)
		out.Raw((in.GasPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Raw((in.Value).MarshalJSON())
	}
	{
		const prefix string = ",\"input\":"
		out.RawString(prefix)
		out.Raw((in.Input).MarshalJSON())
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Raw((in.Nonce).MarshalJSON())
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		out.Raw((in.TransactionIndex).MarshalJSON())
	}
	{
		const prefix string = ",\"v\":"
		out.RawString(prefix)
		out.Raw((in.V).MarshalJSON())
	}
	{
		const prefix string = ",\"r\":"
		out.RawString(prefix)
		out.Raw((in.R).MarshalJSON())
	}
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Raw((in.S).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer(l, v)
}
func easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer1(in *jlexer.Lexer, out *TransactionReceiptResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "blockHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockHash).UnmarshalJSON(data))
			}
		case "blockNumber":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockNumber).UnmarshalJSON(data))
			}
		case "contractAddress":
			if in.IsNull() {
				in.Skip()
				out.ContractAddress = nil
			} else {
				if out.ContractAddress == nil {
					out.ContractAddress = new(Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ContractAddress).UnmarshalJSON(data))
				}
			}
		case "cumulativeGasUsed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CumulativeGasUsed).UnmarshalJSON(data))
			}
		case "effectiveGasPrice":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EffectiveGasPrice).UnmarshalJSON(data))
			}
		case "from":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.From).UnmarshalJSON(data))
			}
		case "to":
			if in.IsNull() {
				in.Skip()
				out.To = nil
			} else {
				if out.To == nil {
					out.To = new(Address)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.To).UnmarshalJSON(data))
				}
			}
		case "gasUsed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GasUsed).UnmarshalJSON(data))
			}
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]*LogResponse, 0, 8)
					} else {
						out.Logs = []*LogResponse{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *LogResponse
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(LogResponse)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Logs = append(out.Logs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "logsBloom":
			if in.IsNull() {
				in.Skip()
				out.LogsBloom = nil
			} else {
				out.LogsBloom = in.Bytes()
			}
		case "status":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Status).UnmarshalJSON(data))
			}
		case "transactionHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionHash).UnmarshalJSON(data))
			}
		case "transactionIndex":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionIndex).UnmarshalJSON(data))
			}
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Type).UnmarshalJSON(data))
			}
		case "nearTransactionHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NearHash).UnmarshalJSON(data))
			}
		case "nearReceiptHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.NearReceiptHash).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer1(out *jwriter.Writer, in TransactionReceiptResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix[1:])
		out.RawText((in.BlockHash).MarshalText())
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.Raw((in.BlockNumber).MarshalJSON())
	}
	{
		const prefix string = ",\"contractAddress\":"
		out.RawString(prefix)
		if in.ContractAddress == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.ContractAddress).MarshalText())
		}
	}
	{
		const prefix string = ",\"cumulativeGasUsed\":"
		out.RawString(prefix)
		out.Raw((in.CumulativeGasUsed).MarshalJSON())
	}
	{
		const prefix string = ",\"effectiveGasPrice\":"
		out.RawString(prefix)
		out.Raw((in.EffectiveGasPrice).MarshalJSON())
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.RawText((in.From).MarshalText())
	}
	{
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		if in.To == nil {
			out.RawString("null")
		} else {
			out.RawText((*in.To).MarshalText())
		}
	}
	{
		const prefix string = ",\"gasUsed\":"
		out.RawString(prefix)
		out.Raw((in.GasUsed).MarshalJSON())
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Logs {
				if v6 > 0 {
					out.RawByte(',')
				}
				if v7 == nil {
					out.RawString("null")
				} else {
					(*v7).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"logsBloom\":"
		out.RawString(prefix)
		out.Raw((in.LogsBloom).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Raw((in.Status).MarshalJSON())
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		out.RawText((in.TransactionHash).MarshalText())
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		out.Raw((in.TransactionIndex).MarshalJSON())
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	{
		const prefix string = ",\"nearTransactionHash\":"
		out.RawString(prefix)
		out.RawText((in.NearHash).MarshalText())
	}
	{
		const prefix string = ",\"nearReceiptHash\":"
		out.RawString(prefix)
		out.RawText((in.NearReceiptHash).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TransactionReceiptResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TransactionReceiptResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TransactionReceiptResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TransactionReceiptResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer1(l, v)
}
func easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer2(in *jlexer.Lexer, out *LogResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "removed":
			out.Removed = bool(in.Bool())
		case "logIndex":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LogIndex).UnmarshalJSON(data))
			}
		case "transactionIndex":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionIndex).UnmarshalJSON(data))
			}
		case "transactionHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionHash).UnmarshalJSON(data))
			}
		case "blockHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockHash).UnmarshalJSON(data))
			}
		case "blockNumber":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BlockNumber).UnmarshalJSON(data))
			}
		case "address":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Address).UnmarshalJSON(data))
			}
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "topics":
			if in.IsNull() {
				in.Skip()
				out.Topics = nil
			} else {
				in.Delim('[')
				if out.Topics == nil {
					if !in.IsDelim(']') {
						out.Topics = make([]Bytea, 0, 2)
					} else {
						out.Topics = []Bytea{}
					}
				} else {
					out.Topics = (out.Topics)[:0]
				}
				for !in.IsDelim(']') {
					var v9 Bytea
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						v9 = in.Bytes()
					}
					out.Topics = append(out.Topics, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer2(out *jwriter.Writer, in LogResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"removed\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Removed))
	}
	{
		const prefix string = ",\"logIndex\":"
		out.RawString(prefix)
		out.Raw((in.LogIndex).MarshalJSON())
	}
	{
		const prefix string = ",\"transactionIndex\":"
		out.RawString(prefix)
		out.Raw((in.TransactionIndex).MarshalJSON())
	}
	{
		const prefix string = ",\"transactionHash\":"
		out.RawString(prefix)
		out.RawText((in.TransactionHash).MarshalText())
	}
	{
		const prefix string = ",\"blockHash\":"
		out.RawString(prefix)
		out.RawText((in.BlockHash).MarshalText())
	}
	{
		const prefix string = ",\"blockNumber\":"
		out.RawString(prefix)
		out.Raw((in.BlockNumber).MarshalJSON())
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.RawText((in.Address).MarshalText())
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Raw((in.Data).MarshalJSON())
	}
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		if in.Topics == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Topics {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Raw((v12).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer2(l, v)
}
func easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer3(in *jlexer.Lexer, out *BlockResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "difficulty":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Difficulty).UnmarshalJSON(data))
			}
		case "extraData":
			if in.IsNull() {
				in.Skip()
				out.ExtraData = nil
			} else {
				out.ExtraData = in.Bytes()
			}
		case "gasLimit":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GasLimit).UnmarshalJSON(data))
			}
		case "gasUsed":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.GasUsed).UnmarshalJSON(data))
			}
		case "hash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Hash).UnmarshalJSON(data))
			}
		case "logsBloom":
			if in.IsNull() {
				in.Skip()
				out.LogsBloom = nil
			} else {
				out.LogsBloom = in.Bytes()
			}
		case "miner":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Miner).UnmarshalJSON(data))
			}
		case "nonce":
			if in.IsNull() {
				in.Skip()
				out.Nonce = nil
			} else {
				out.Nonce = in.Bytes()
			}
		case "number":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Number).UnmarshalJSON(data))
			}
		case "parentHash":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ParentHash).UnmarshalJSON(data))
			}
		case "receiptsRoot":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ReceiptsRoot).UnmarshalJSON(data))
			}
		case "sha3Uncles":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Sha3Uncles).UnmarshalJSON(data))
			}
		case "size":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Size).UnmarshalJSON(data))
			}
		case "stateRoot":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StateRoot).UnmarshalJSON(data))
			}
		case "timestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Timestamp).UnmarshalJSON(data))
			}
		case "totalDifficulty":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TotalDifficulty).UnmarshalJSON(data))
			}
		case "transactions":
			if in.IsNull() {
				in.Skip()
				out.Transactions = nil
			} else {
				in.Delim('[')
				if out.Transactions == nil {
					if !in.IsDelim(']') {
						out.Transactions = make([]interface{}, 0, 4)
					} else {
						out.Transactions = []interface{}{}
					}
				} else {
					out.Transactions = (out.Transactions)[:0]
				}
				for !in.IsDelim(']') {
					var v16 interface{}
					if m, ok := v16.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v16.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v16 = in.Interface()
					}
					out.Transactions = append(out.Transactions, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "transactionsRoot":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TransactionsRoot).UnmarshalJSON(data))
			}
		case "uncles":
			if in.IsNull() {
				in.Skip()
				out.Uncles = nil
			} else {
				in.Delim('[')
				if out.Uncles == nil {
					if !in.IsDelim(']') {
						out.Uncles = make([]H256, 0, 2)
					} else {
						out.Uncles = []H256{}
					}
				} else {
					out.Uncles = (out.Uncles)[:0]
				}
				for !in.IsDelim(']') {
					var v17 H256
					if data := in.Raw(); in.Ok() {
						in.AddError((v17).UnmarshalJSON(data))
					}
					out.Uncles = append(out.Uncles, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer3(out *jwriter.Writer, in BlockResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"difficulty\":"
		out.RawString(prefix[1:])
		out.Raw((in.Difficulty).MarshalJSON())
	}
	{
		const prefix string = ",\"extraData\":"
		out.RawString(prefix)
		out.Raw((in.ExtraData).MarshalJSON())
	}
	{
		const prefix string = ",\"gasLimit\":"
		out.RawString(prefix)
		out.Raw((in.GasLimit).MarshalJSON())
	}
	{
		const prefix string = ",\"gasUsed\":"
		out.RawString(prefix)
		out.Raw((in.GasUsed).MarshalJSON())
	}
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix)
		out.RawText((in.Hash).MarshalText())
	}
	{
		const prefix string = ",\"logsBloom\":"
		out.RawString(prefix)
		out.Raw((in.LogsBloom).MarshalJSON())
	}
	{
		const prefix string = ",\"miner\":"
		out.RawString(prefix)
		out.RawText((in.Miner).MarshalText())
	}
	{
		const prefix string = ",\"nonce\":"
		out.RawString(prefix)
		out.Raw((in.Nonce).MarshalJSON())
	}
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix)
		out.Raw((in.Number).MarshalJSON())
	}
	{
		const prefix string = ",\"parentHash\":"
		out.RawString(prefix)
		out.RawText((in.ParentHash).MarshalText())
	}
	{
		const prefix string = ",\"receiptsRoot\":"
		out.RawString(prefix)
		out.RawText((in.ReceiptsRoot).MarshalText())
	}
	{
		const prefix string = ",\"sha3Uncles\":"
		out.RawString(prefix)
		out.RawText((in.Sha3Uncles).MarshalText())
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Raw((in.Size).MarshalJSON())
	}
	{
		const prefix string = ",\"stateRoot\":"
		out.RawString(prefix)
		out.RawText((in.StateRoot).MarshalText())
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Raw((in.Timestamp).MarshalJSON())
	}
	{
		const prefix string = ",\"totalDifficulty\":"
		out.RawString(prefix)
		out.Raw((in.TotalDifficulty).MarshalJSON())
	}
	{
		const prefix string = ",\"transactions\":"
		out.RawString(prefix)
		if in.Transactions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.Transactions {
				if v18 > 0 {
					out.RawByte(',')
				}
				if m, ok := v19.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"transactionsRoot\":"
		out.RawString(prefix)
		out.RawText((in.TransactionsRoot).MarshalText())
	}
	{
		const prefix string = ",\"uncles\":"
		out.RawString(prefix)
		if in.Uncles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Uncles {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.RawText((v21).MarshalText())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BlockResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BlockResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodeGithubComAuroraIsNearGoRelayer3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BlockResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BlockResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodeGithubComAuroraIsNearGoRelayer3(l, v)
}
